{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "train diffusion",
            "type": "python",
            "request": "launch",
            "program": "main_diffusion.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--num_timesteps=100",
                "--gpus=0", // force it to use cpu (for development)
                "--radius=5", // cutoff distance 
                "--num_workers=-1", // number of workers to load the dataset
                "--dataset=alexandria-dev",
                "--max_neighbors=8", // more neighbors = more messages. But since the number of neighbors explodes, we need to limit this number
            ],
        },
        {
            "name": "generate",
            "type": "python",
            "request": "launch",
            "program": "main_diffusion_generate.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [
                "--model_path=models/learn-lattice-angles.ckpt",
            ],
        },
        {
            "name": "relax",
            "type": "python",
            "request": "launch",
            "program": "diffusion/inference/relax.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [],
        },
        {
            "name": "test lattice helpers",
            "type": "python",
            "request": "launch",
            "program": "diffusion/lattice_helpers_test.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [],
        },
        {
            "name": "prep datasets",
            "type": "python",
            "request": "launch",
            "program": "diffusion/prep_datasets.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [],
        },
        {
            "name": "process results",
            "type": "python",
            "request": "launch",
            "program": "main_diffusion_process_results.py",
            "console": "integratedTerminal",
            "justMyCode": false,
            "args": [],
        },
        {
            "name": "verify vp limited mean and var",
            "type": "python",
            "request": "launch",
            "program": "exploration/verify_vp_limited_mean_and_var.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [],
        },
        {
            "name": "find avg density",
            "type": "python",
            "request": "launch",
            "program": "exploration/find_avg_density_of_dataset.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [],
        },
        {
            "name": "view generated crystal",
            "type": "python",
            "request": "launch",
            "program": "exploration/view_generated_crystal.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [],
        },
        {
            "name": "view alexandria dataset",
            "type": "python",
            "request": "launch",
            "program": "exploration/view_alexandria_dataset.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [],
        },
        {
            "name": "largest system in dataset",
            "type": "python",
            "request": "launch",
            "program": "exploration/largest_system_in_dataset.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [],
        },
        {
            "name": "verify model is equivariant",
            "type": "python",
            "request": "launch",
            "program": "exploration/verify_model_is_equivariant.py",
            "console": "integratedTerminal",
            "justMyCode": true,
            "args": [],
        }
    ]
}